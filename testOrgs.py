import sys, os, subprocess, glob

simulationTemplate="""// auto-generated by evolverilog
`include "%s" // include the module to call

module organismSimulator;

    reg %s; // number of Inputs Args
    wire %s; // number of Outputs Args
    
    parameter settleDelay = 10000;
    
    %s uut (%s,%s); // module to call, number of Output, Input Args
    
    integer i;
    
    initial
    begin
        $display (%s); // io structure
        // should run number of inputs ^ 2 times
        for (i = 0; i < %d; i = i + 1) begin
            {%s} = i; // number of Input Args
            #settleDelay
            $display ("%s",%s,%s); // total args, outputs, inputs 
        end
    end
    
endmodule"""

def writeSimulation(verilogTestOutputFile,organismModuleFile,
    numInputs,numOutputs,organismModuleName=None):
    
    if organismModuleName is None:
        organismModuleName = organismModuleFile.split('.')[0]
    
    totalArgs = numInputs+numOutputs
    inputs = ','.join('Input%d'%i for i in xrange(numInputs))
    outputs = ','.join('Output%d'%i for i in xrange(numOutputs))
    display = ','.join('%d' for i in xrange(totalArgs))
    ioStructure = '"'+','.join('out' if i < numOutputs else 'in' for i in xrange(totalArgs) )+'"'
    
    templateArgs = (organismModuleFile,inputs,outputs,organismModuleName,
        outputs,inputs,ioStructure,numInputs**2,inputs,display,outputs,
        inputs)
    
    simulationCode = simulationTemplate%templateArgs
    
    f = open(verilogTestOutputFile,'w')
    f.write(simulationCode)
    f.close()

def getSimulationResultFromFile(filepath):
    
    fin = open(filepath,'r')
    txt = fin.read()
    fin.close()
    
    return getSimulationResultFromText(txt)

def getSimulationResultFromText(txt):
    
    lines = txt.split('\n')
    
    # reads first line (contains formatting information)
    ioStructure = lines[0].split(',')
    numberOfInputs = ioStructure.count("in")
    numberOfOutputs = ioStructure.count("out")
    
    s = SimulationResult(numberOfInputs,numberOfOutputs)
    
    # will go through lines 1:END (Note: last element is EOF)
    for line in lines[1:-1]:
        simResults = line.strip(' ').split(',') # csv format
        s.addTrial(
            SimulationTrial(
                simResults[0:numberOfOutputs],
                simResults[numberOfOutputs:]
            )
        )
        
    return s

class SimulationResult:
    
    def __init__(self,numInputs,numOutputs):
        
        self._trials = []
        self._numberOfInputs = 0
        self._numberOfOutputs = 0
    
    def addTrial(self,simTrial):
        self._trials.append(simTrial)
        
    def getTrials(self):
        return self._trials
        
    def __str__(self):
        return '\n'.join(["Trial %d: %s"%(i,str(trial)) for i,trial in enumerate(self.getTrials())])

class SimulationTrial:
    
    def __init__(self,outputs,inputs):
        
        self._inputs = inputs
        self._outputs = outputs
        
    def getInputs(self):
        return self._inputs
        
    def getOutputs(self):
        return self._outputs
        
    def __str__(self):
        return "Inputs: %s. Outputs: %s"%(str(self.getInputs()),str(self.getOutputs()))


def testOrgs(subdir):
	"""
	Run the evolverilog test suite in a subdirectory.
	"""
	
	allResults = {}
	
	for file in glob.glob(os.path.join(subdir, '*.v')):
		writeSimulation(os.path.join(subdir,'test.v'), file, 2, 1, 'andTest') #Currently assuming AND gate 2in/1out andTest
		print 'Testing organism ' + file
		subprocess.call(['iverilog', '-o',  os.path.join(subdir,'test.o'), os.path.join(subdir,'test.v')])
		process = subprocess.Popen(['vvp', os.path.join(subdir,'test.o')], stdout=subprocess.PIPE)
		output = process.communicate() #(stdout, stderr)
		print output
		simResult = getSimulationResultFromText('\n'.join(output[0].split('\r\n')))
		print simResult
		allResults[file] = simResult
	print allResults.keys()
	
	os.remove(os.path.join(subdir,'test.v'))
	os.remove(os.path.join(subdir,'test.o'))
		
	

if __name__ == "__main__":
	testOrgs(sys.argv[1])