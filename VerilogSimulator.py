import os

# template for Verilog test-benches
simulationTemplate="""// auto-generated by evolverilog
`include "%s" // include the module to call

module organismSimulator;

    reg %s; // number of Inputs Args
    wire %s; // number of Outputs Args
    
    parameter settleDelay = 10000;
    
    %s uut (%s,%s); // module to call, number of Output, Input Args
    
    integer i;
    
    initial
    begin
        $display (%s); // io structure
        // should run number of inputs ^ 2 times
        for (i = 0; i < %d; i = i + 1) begin
            {%s} = i; // number of Input Args
            #settleDelay
            $display ("%s",%s,%s); // total args, outputs, inputs 
        end
    end
    
endmodule"""

def writeSimulation(verilogTestOutputFile,organismModuleFile,
    numInputs,numOutputs,organismModuleName=None):
    """
    Auto-generates a Verilog test-bench for a verilog module with a
    given number of inputs and outputs.
    
    Args:
        verilogTestOutputFile: file the Verilog test-bench is written to
        organismModuleFile: module file containing the unit under test
        numInputs: number of inputs to the unit under test
        numOutputs: number of outputs of the unit under test
        organismModuleName: if specified, calls the specific module
            in organismModuleFile as the unit under test.  If
            unspecified, it assumes that the name of the organism is
            the same as the module file name (minus the extension).
            
    Output:
        None
    """
    
    # if organismModuleName is unspecified, assume that it is equal
    # to the module file name minus the extension
    if organismModuleName is None:
        organismModuleName = organismModuleFile.split('.')[0]
    
    # get values necessary for template
    totalArgs = numInputs+numOutputs
    inputs = ','.join('Input%d'%i for i in xrange(numInputs))
    outputs = ','.join('Output%d'%i for i in xrange(numOutputs))
    display = ','.join('%d' for i in xrange(totalArgs))
    ioStructure = '"'+','.join('out' if i < numOutputs else 'in' for i in xrange(totalArgs) )+'"'
    
    templateArgs = (organismModuleFile,inputs,outputs,organismModuleName,
        outputs,inputs,ioStructure,numInputs**2,inputs,display,outputs,
        inputs)
    
    # fill template
    simulationCode = simulationTemplate%templateArgs
    
    # write filled template to file
    f = open(verilogTestOutputFile,'w')
    f.write(simulationCode)
    f.close()

def getSimulationResultFromFile(filepath):
    """
    Parses the vvp simulation results of the auto-generated test bench
    contained in a file into a SimulationResult.
    
    Args:
        filepath: file path of vvp output from the auto-generated test
            bench
            
    Output:
        SimulationResult
    """
    
    fin = open(filepath,'r')
    txt = fin.read()
    fin.close()
    
    return getSimulationResultFromText(txt)

def getSimulationResultFromText(txt):
    """
    Parses the vvp simulation result text of the auto-generated test 
    bench into a SimulationResult.
    
    Args:
        txt: vvp output from the auto-generated test bench
            
    Output:
        SimulationResult
    """
    
    # split text into lines
    lines = txt.split('\n')
    
    # reads first line (contains formatting information)
    ioStructure = lines[0].split(',')
    numberOfInputs = ioStructure.count("in")
    numberOfOutputs = ioStructure.count("out")
    
    # create SimulationResult without trials
    s = SimulationResult(numberOfInputs,numberOfOutputs)
    
    # will go through lines 1:END (Note: last element is EOF)
    # fills SimulationResult with trials
    for line in lines[1:-1]:
        simResults = line.strip(' ').split(',') # csv format
        s.addTrial(
            SimulationTrial(
                simResults[0:numberOfOutputs],
                simResults[numberOfOutputs:]
            )
        )
        
    return s

class SimulationResult:
    
    def __init__(self,numInputs,numOutputs):
        """
        Creates an object representative of the results of a Verilog
        test bench simulation.  Initially, it has no trials.  Trials
        must be added.
        
        Args:
            numInputs: (int) number of inputs to the unit under test
            numOutputs: (int) number of outputs from the unit under test
        """
        
        # stores trials (SimulationTrial)
        self._trials = []
        self._numberOfInputs = 0
        self._numberOfOutputs = 0
    
    def addTrial(self,simTrial):
        """Adds a trial."""
        self._trials.append(simTrial)
        
    def getTrials(self):
        """Returns all trials."""
        return self._trials
        
    def __str__(self):
        return '\n'.join(["Trial %d: %s"%(i,str(trial)) for i,trial in enumerate(self.getTrials())])

class SimulationTrial:
    
    def __init__(self,outputs,inputs):
        """
        Represents a line of results (trial) in a Verilog test bench
        simulation.
        
        Args:
            Outputs: (list) outputs in order from simulation file
            Inputs: (list) inputs in order from simulation file
        """
        
        self._inputs = inputs
        self._outputs = outputs
        
    def getInputs(self):
        """Returns all inputs of the trial."""
        return self._inputs
        
    def getOutputs(self):
        """Returns all outputs of the trial."""
        return self._outputs
        
    def __str__(self):
        return "Inputs: %s. Outputs: %s"%(str(self.getInputs()),str(self.getOutputs()))

if __name__ == '__main__':
    writeSimulation('simpleAnd_test.v','simpleAnd.v',2,1)
    print getSimulationResultFromFile('testdata.txt')
